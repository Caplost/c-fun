{
  "1": {
    "id": 1,
    "title": "两数之和",
    "description": "\u003ch3\u003e【题目描述】\u003c/h3\u003e\u003cp\u003e给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。\u003c/p\u003e\u003cp\u003e你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两次。\u003c/p\u003e\u003ch3\u003e输入\u003c/h3\u003e\u003cp\u003e第一行为数组大小 n 和目标值 target，以空格分隔。\u003c/p\u003e\u003cp\u003e第二行为 n 个整数，表示数组 nums。\u003c/p\u003e\u003ch3\u003e输出\u003c/h3\u003e\u003cp\u003e输出为两个整数，分别为符合条件的两个数的下标（从0开始计数），以空格分隔。输出的下标可以是任意顺序。\u003c/p\u003e",
    "difficulty": "Easy",
    "time_limit": 1000,
    "memory_limit": 65536,
    "knowledge_tag": null,
    "reference_solution": "",
    "thinking_analysis": "",
    "created_at": "2025-02-27T19:52:22.572747+08:00"
  },
  "10": {
    "id": 10,
    "title": "字符串中的数字求和",
    "description": "给定一个字符串，其中包含数字和非数字字符。请编写一个程序，提取字符串中的所有数字，并将它们相加，输出最终的和。\n\n输入格式：\n- 一行字符串，长度不超过1000。\n\n输出格式：\n- 一个整数，表示字符串中所有数字的和。\n\n数据范围：\n- 字符串中可能包含大小写字母、数字、空格和其他特殊字符。\n- 字符串中的数字可能连续出现，也可能分散出现。\n- 字符串中的数字可能为多位数。\n\n示例：\n输入：\"abc123xyz45 6\"\n输出：174\n解释：字符串中的数字为123、45和6，它们的和为174。",
    "difficulty": "Medium",
    "time_limit": 1000,
    "memory_limit": 262144,
    "knowledge_tag": [
      "变量与常量",
      "基本数据类型",
      "条件语句",
      "循环语句",
      "数组",
      "函数",
      "字符串处理"
    ],
    "reference_solution": "",
    "thinking_analysis": "",
    "created_at": "2025-03-06T13:29:07.942382+08:00"
  },
  "11": {
    "id": 11,
    "title": "数字变换的奇妙序列",
    "description": "小杨在研究一个有趣的数字变换问题。对于任意正整数n，按照以下规则生成序列直到出现1为止：\n- 如果当前数是1，停止变换\n- 如果是偶数，则下一步变为n/2\n- 如果是奇数且不是1，则下一步变为3n+1或n-1（当n能被3整除时选择前者，否则后者）\n\n输入一个正整数n，输出变换过程中产生的所有数字（包含原始数字），用空格分隔。\n\n输入格式：一个整数n (1 ≤ n ≤ 10^5)\n输出格式：由空格分隔的数字序列\n数据范围：保证所有测试用例都能在1000步内结束",
    "difficulty": "Medium",
    "time_limit": 1000,
    "memory_limit": 262144,
    "knowledge_tag": [
      "条件语句",
      "循环语句"
    ],
    "reference_solution": "",
    "thinking_analysis": "",
    "created_at": "2025-03-06T15:15:43.58755+08:00"
  },
  "12": {
    "id": 12,
    "title": "总线带宽计算",
    "description": "在计算机组成原理中，总线带宽由数据总线宽度、时钟频率和传输次数决定。请编写程序根据给定参数计算总线带宽。\n\n输入格式：三个整数，分别表示数据总线宽度（位，16的倍数）、时钟频率（MHz）、每个时钟周期的传输次数。\n输出格式：总线带宽（MB/s），保留两位小数。\n数据范围：数据总线宽度∈[16,64]且为16的倍数；时钟频率∈[1,1000]；传输次数∈[1,4]。",
    "difficulty": "Medium",
    "time_limit": 1000,
    "memory_limit": 262144,
    "knowledge_tag": [
      "计算机基本构成",
      "数学计算",
      "单位转换"
    ],
    "reference_solution": "#include \u003ciostream\u003e\n#include \u003ciomanip\u003e\nusing namespace std;\n\nint main() {\n    int w, f, t;\n    cin \u003e\u003e w \u003e\u003e f \u003e\u003e t;\n    double bandwidth = (w / 8.0) * f * t;\n    cout \u003c\u003c fixed \u003c\u003c setprecision(2) \u003c\u003c bandwidth \u003c\u003c endl;\n    return 0;\n}",
    "thinking_analysis": "解题思路：\n1. 理解总线带宽公式：带宽 = (数据总线宽度/8) * 时钟频率 * 传输次数\n2. 单位转换：位→字节（/8），MHz→Hz（*1e6），最终结果单位为MB/s（1e6字节/秒）\n3. 注意浮点数精度处理：必须使用8.0进行除法运算\n4. 常见错误点：\n   - 忘记位到字节的转换\n   - 整数除法导致精度丢失\n   - 输出格式不符合两位小数要求",
    "created_at": "2025-03-06T16:00:19.735456+08:00"
  },
  "13": {
    "id": 13,
    "title": "CPU指令模拟运算",
    "description": "模拟一个简化的CPU运算器执行指令的过程。CPU包含一个4位寄存器R，初始值为0。指令系统包含以下操作：\n1. ADD x: R = (R + x) mod 16\n2. XOR x: R = R XOR x\n3. SHL: R左移1位，空位补0（相当于乘以2模16）\n4. SHR: R右移1位，空位补0（相当于整除2）\n\n输入格式：\n第一行n表示指令数（1≤n≤1e5）\n接下来n行每行一个指令\n\n输出格式：\n输出最终寄存器R的值（0-15的十进制数）\n\n数据范围：\n所有x均为0-15的整数\nSHL/SHR指令不带参数",
    "difficulty": "Medium",
    "time_limit": 1000,
    "memory_limit": 262144,
    "knowledge_tag": [
      "计算机基本构成",
      "位运算",
      "模拟"
    ],
    "reference_solution": "#include \u003ciostream\u003e\nusing namespace std;\n\nint main() {\n    int n, R = 0;\n    cin \u003e\u003e n;\n    while(n--) {\n        string cmd;\n        cin \u003e\u003e cmd;\n        if(cmd == \"ADD\") {\n            int x; cin \u003e\u003e x;\n            R = (R + x) % 16;\n        } \n        else if(cmd == \"XOR\") {\n            int x; cin \u003e\u003e x;\n            R ^= x;\n        }\n        else if(cmd == \"SHL\") {\n            R = (R \u003c\u003c 1) % 16;\n        }\n        else if(cmd == \"SHR\") {\n            R \u003e\u003e= 1;\n        }\n    }\n    cout \u003c\u003c R \u003c\u003c endl;\n    return 0;\n}",
    "thinking_analysis": "本题考察对计算机基本运算部件的理解。解题关键点包括：\n1. 寄存器状态的维护：使用整型变量模拟4位寄存器，注意模16运算\n2. 指令解析：通过字符串处理识别不同指令类型\n3. 位运算实现：\n   - XOR直接使用^运算符\n   - SHL需要左移后取模处理溢出\n   - SHR直接使用右移运算符\n4. 效率优化：由于n可达1e5，必须使用O(n)算法，避免不必要的操作\n5. 边界处理：特别注意移位操作后的取值范围（0-15）\n\n本题将计算机组成原理中的指令执行过程与位运算数学操作相结合，既考察基础概念，又检验编程实现能力。",
    "created_at": "2025-03-06T18:32:47.78125+08:00"
  },
  "2": {
    "id": 2,
    "title": "回文数",
    "description": "\u003ch3\u003e【题目描述】\u003c/h3\u003e\u003cp\u003e判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。\u003c/p\u003e\u003ch3\u003e输入\u003c/h3\u003e\u003cp\u003e一个整数 x。\u003c/p\u003e\u003ch3\u003e输出\u003c/h3\u003e\u003cp\u003e如果 x 是回文数，输出 true，否则输出 false。\u003c/p\u003e",
    "difficulty": "Easy",
    "time_limit": 500,
    "memory_limit": 32768,
    "knowledge_tag": null,
    "reference_solution": "",
    "thinking_analysis": "",
    "created_at": "2025-02-27T19:52:22.572766+08:00"
  },
  "3": {
    "id": 3,
    "title": "合并两个有序链表",
    "description": "\u003ch3\u003e【题目描述】\u003c/h3\u003e\u003cp\u003e将两个升序链表合并为一个新的升序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。\u003c/p\u003e\u003cp\u003e在这个题目中，我们使用数组来表示链表。\u003c/p\u003e\u003ch3\u003e输入\u003c/h3\u003e\u003cp\u003e第一行是第一个链表的元素，以空格分隔。如果链表为空，则输入为空行。\u003c/p\u003e\u003cp\u003e第二行是第二个链表的元素，以空格分隔。如果链表为空，则输入为空行。\u003c/p\u003e\u003ch3\u003e输出\u003c/h3\u003e\u003cp\u003e合并后的链表元素，以空格分隔。\u003c/p\u003e",
    "difficulty": "Medium",
    "time_limit": 800,
    "memory_limit": 49152,
    "knowledge_tag": null,
    "reference_solution": "",
    "thinking_analysis": "",
    "created_at": "2025-02-27T19:52:22.572774+08:00"
  },
  "4": {
    "id": 4,
    "title": "测试持久化",
    "description": "\u003ch3\u003e【题目描述】\u003c/h3\u003e\u003cp\u003e测试数据持久化功能\u003c/p\u003e\u003ch3\u003e输入\u003c/h3\u003e\u003cp\u003e一个整数\u003c/p\u003e\u003ch3\u003e输出\u003c/h3\u003e\u003cp\u003e输入的整数乘以2\u003c/p\u003e",
    "difficulty": "Easy",
    "time_limit": 1000,
    "memory_limit": 65536,
    "knowledge_tag": null,
    "reference_solution": "",
    "thinking_analysis": "",
    "created_at": "2025-02-27T19:52:42.635751+08:00"
  },
  "5": {
    "id": 5,
    "title": "题目标题1212",
    "description": "\u003ch3\u003e【题目描述】\u003c/h3\u003e\u003cp\u003e这是题目描述\u003c/p\u003e\u003ch3\u003e输入\u003c/h3\u003e\u003cp\u003e输入说明\u003c/p\u003e\u003ch3\u003e输出\u003c/h3\u003e\u003cp\u003e输出说明\u003c/p\u003e",
    "difficulty": "Easy",
    "time_limit": 1000,
    "memory_limit": 65536,
    "knowledge_tag": null,
    "reference_solution": "",
    "thinking_analysis": "",
    "created_at": "2025-02-27T19:55:57.734828+08:00"
  },
  "6": {
    "id": 6,
    "title": "示例题目",
    "description": "题目描述...",
    "difficulty": "Medium",
    "time_limit": 1000,
    "memory_limit": 65536,
    "knowledge_tag": null,
    "reference_solution": "",
    "thinking_analysis": "",
    "created_at": "2025-03-05T21:19:29.845835+08:00"
  },
  "7": {
    "id": 7,
    "title": "内存地址计算",
    "description": "在计算机系统中，内存地址的计算是一个基本但重要的操作。假设有一个计算机系统，其内存按字节编址，且内存地址从0开始。给定一个二维数组的起始地址和数组的维度，以及一个元素的行列索引，计算该元素的内存地址。\n\n输入格式:\n- 第一行包含三个整数：起始地址base（0 ≤ base ≤ 10^6），行数rows（1 ≤ rows ≤ 10^3），列数cols（1 ≤ cols ≤ 10^3）。\n- 第二行包含两个整数：目标元素的行索引row（0 ≤ row \u003c rows），列索引col（0 ≤ col \u003c cols）。\n\n输出格式:\n- 输出一个整数，表示目标元素的内存地址。\n\n注意：假设数组是按行优先顺序存储的。",
    "difficulty": "Medium",
    "time_limit": 1000,
    "memory_limit": 262144,
    "knowledge_tag": [
      "计算机基本构成",
      "内存地址计算"
    ],
    "reference_solution": "",
    "thinking_analysis": "",
    "created_at": "2025-03-06T11:44:12.68074+08:00"
  },
  "8": {
    "id": 8,
    "title": "进程调度模拟",
    "description": "在操作系统中，进程调度是一个核心概念。本题要求你模拟一个简单的进程调度器。给定一组进程，每个进程有一个到达时间和执行时间，你需要按照先来先服务（FCFS）的调度算法，计算每个进程的完成时间、周转时间和等待时间。\n\n输入格式:\n第一行包含一个整数n，表示进程的数量。\n接下来n行，每行包含两个整数，分别表示进程的到达时间和执行时间。\n\n输出格式:\n输出n行，每行包含三个整数，分别表示进程的完成时间、周转时间和等待时间。\n\n注意:\n- 进程按照到达时间的顺序进行处理。\n- 如果多个进程同时到达，按照输入顺序处理。",
    "difficulty": "Easy",
    "time_limit": 1000,
    "memory_limit": 262144,
    "knowledge_tag": [
      "计算机基本构成",
      "操作系统基本概念"
    ],
    "reference_solution": "",
    "thinking_analysis": "",
    "created_at": "2025-03-06T11:45:49.027769+08:00"
  },
  "9": {
    "id": 9,
    "title": "计算机内存地址转换",
    "description": "在计算机系统中，内存地址通常以十六进制表示。给定一个内存地址的十六进制字符串，你需要将其转换为二进制形式，并计算其中1的个数。\n\n输入格式:\n一个字符串，表示内存地址的十六进制形式。字符串长度不超过8个字符，且只包含0-9和A-F。\n\n输出格式:\n一个整数，表示该内存地址的二进制形式中1的个数。\n\n数据范围:\n输入字符串长度 ≤ 8\n\n示例:\n输入: \"1A3F\"\n输出: 8\n解释: 1A3F的二进制形式为0001101000111111，其中1的个数为8。",
    "difficulty": "Medium",
    "time_limit": 1000,
    "memory_limit": 262144,
    "knowledge_tag": [
      "计算机基本构成",
      "进制转换"
    ],
    "reference_solution": "",
    "thinking_analysis": "",
    "created_at": "2025-03-06T13:22:29.206723+08:00"
  }
}